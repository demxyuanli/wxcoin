diff --git a/src/docking/DockManager.cpp b/src/docking/DockManager.cpp
index 1234567..abcdefg 100644
--- a/src/docking/DockManager.cpp
+++ b/src/docking/DockManager.cpp
@@ -7,6 +7,7 @@
 #include "docking/AutoHideContainer.h"
 #include "docking/PerspectiveManager.h"
 #include <wx/xml/xml.h>
+#include <wx/sstream.h>
 #include <algorithm>
 
 namespace ads {
diff --git a/src/docking/DockWidget.cpp b/src/docking/DockWidget.cpp
index 1234567..abcdefg 100644
--- a/src/docking/DockWidget.cpp
+++ b/src/docking/DockWidget.cpp
@@ -8,10 +8,10 @@
 namespace ads {
 
 // Define custom events
-wxDEFINE_EVENT(DockWidget::EVT_DOCK_WIDGET_CLOSED, wxCommandEvent);
-wxDEFINE_EVENT(DockWidget::EVT_DOCK_WIDGET_CLOSING, wxCommandEvent);
-wxDEFINE_EVENT(DockWidget::EVT_DOCK_WIDGET_VISIBILITY_CHANGED, wxCommandEvent);
-wxDEFINE_EVENT(DockWidget::EVT_DOCK_WIDGET_FEATURES_CHANGED, wxCommandEvent);
+wxEventTypeTag<wxCommandEvent> DockWidget::EVT_DOCK_WIDGET_CLOSED("DockWidget::EVT_DOCK_WIDGET_CLOSED");
+wxEventTypeTag<wxCommandEvent> DockWidget::EVT_DOCK_WIDGET_CLOSING("DockWidget::EVT_DOCK_WIDGET_CLOSING");
+wxEventTypeTag<wxCommandEvent> DockWidget::EVT_DOCK_WIDGET_VISIBILITY_CHANGED("DockWidget::EVT_DOCK_WIDGET_VISIBILITY_CHANGED");
+wxEventTypeTag<wxCommandEvent> DockWidget::EVT_DOCK_WIDGET_FEATURES_CHANGED("DockWidget::EVT_DOCK_WIDGET_FEATURES_CHANGED");
 
 // Event table
 wxBEGIN_EVENT_TABLE(DockWidget, wxPanel)
@@ -76,10 +76,10 @@ void DockWidget::setWidget(wxWindow* widget, InsertMode insertMode) {
         wxWindow* contentToAdd = widget;
         
         // Handle scroll area mode
-        if (insertMode == AutoScrollArea || insertMode == ForceScrollArea) {
+        if (insertMode == InsertMode::AutoScrollArea || insertMode == InsertMode::ForceScrollArea) {
             bool needsScrollArea = false;
             
-            if (insertMode == ForceScrollArea) {
+            if (insertMode == InsertMode::ForceScrollArea) {
                 needsScrollArea = true;
             } else {
                 // Auto mode - check if widget needs scroll area
@@ -409,7 +409,7 @@ bool DockWidget::isAutoHide() const {
     
     // Check if this widget is in auto-hide mode
     // This would be tracked by the dock manager
-    return m_dockManager->isAutoHide(this);
+    return m_dockManager->isAutoHide(const_cast<DockWidget*>(this));
 }
 
 void DockWidget::setAutoHide(bool enable) {
diff --git a/src/docking/DockArea.cpp b/src/docking/DockArea.cpp
index 1234567..abcdefg 100644
--- a/src/docking/DockArea.cpp
+++ b/src/docking/DockArea.cpp
@@ -11,14 +11,14 @@
 namespace ads {
 
 // Define custom events
-wxDEFINE_EVENT(DockArea::EVT_DOCK_AREA_CURRENT_CHANGED, wxCommandEvent);
-wxDEFINE_EVENT(DockArea::EVT_DOCK_AREA_CLOSING, wxCommandEvent);
-wxDEFINE_EVENT(DockArea::EVT_DOCK_AREA_CLOSED, wxCommandEvent);
-wxDEFINE_EVENT(DockArea::EVT_DOCK_AREA_TAB_ABOUT_TO_CLOSE, wxCommandEvent);
+wxEventTypeTag<wxCommandEvent> DockArea::EVT_DOCK_AREA_CURRENT_CHANGED("DockArea::EVT_DOCK_AREA_CURRENT_CHANGED");
+wxEventTypeTag<wxCommandEvent> DockArea::EVT_DOCK_AREA_CLOSING("DockArea::EVT_DOCK_AREA_CLOSING");
+wxEventTypeTag<wxCommandEvent> DockArea::EVT_DOCK_AREA_CLOSED("DockArea::EVT_DOCK_AREA_CLOSED");
+wxEventTypeTag<wxCommandEvent> DockArea::EVT_DOCK_AREA_TAB_ABOUT_TO_CLOSE("DockArea::EVT_DOCK_AREA_TAB_ABOUT_TO_CLOSE");
 
-wxDEFINE_EVENT(DockAreaTabBar::EVT_TAB_CLOSE_REQUESTED, wxCommandEvent);
-wxDEFINE_EVENT(DockAreaTabBar::EVT_TAB_CURRENT_CHANGED, wxCommandEvent);
-wxDEFINE_EVENT(DockAreaTabBar::EVT_TAB_MOVED, wxCommandEvent);
+wxEventTypeTag<wxCommandEvent> DockAreaTabBar::EVT_TAB_CLOSE_REQUESTED("DockAreaTabBar::EVT_TAB_CLOSE_REQUESTED");
+wxEventTypeTag<wxCommandEvent> DockAreaTabBar::EVT_TAB_CURRENT_CHANGED("DockAreaTabBar::EVT_TAB_CURRENT_CHANGED");
+wxEventTypeTag<wxCommandEvent> DockAreaTabBar::EVT_TAB_MOVED("DockAreaTabBar::EVT_TAB_MOVED");
 
-wxDEFINE_EVENT(DockAreaTitleBar::EVT_TITLE_BAR_BUTTON_CLICKED, wxCommandEvent);
+wxEventTypeTag<wxCommandEvent> DockAreaTitleBar::EVT_TITLE_BAR_BUTTON_CLICKED("DockAreaTitleBar::EVT_TITLE_BAR_BUTTON_CLICKED");
 
 // Event tables
@@ -265,7 +265,7 @@ bool DockArea::testDockAreaFlag(DockAreaFlag flag) const {
 }
 
 void DockArea::toggleView(bool open) {
-    SetVisible(open);
+    Show(open);
 }
 
 void DockArea::setVisible(bool visible) {
@@ -780,7 +780,7 @@ void DockAreaTabBar::showTabOverflowMenu() {
     for (int i = 0; i < static_cast<int>(m_tabs.size()); ++i) {
         wxString title = m_tabs[i].widget->title();
         if (i == m_currentIndex) {
-            title = "â–¶ " + title; // Add marker for current tab
+            title = "> " + title; // Add marker for current tab
         }
         
         wxMenuItem* item = menu.Append(wxID_ANY, title);
@@ -876,7 +876,7 @@ void DockAreaTitleBar::updateButtonStates() {
 
 void DockAreaTitleBar::createButtons() {
     // Create pin button (for auto-hide)
-    wxButton* pinButton = new wxButton(this, wxID_ANY, "ðŸ“Œ", wxDefaultPosition, wxSize(20, 20));
+    wxButton* pinButton = new wxButton(this, wxID_ANY, "P", wxDefaultPosition, wxSize(20, 20));
     pinButton->SetToolTip("Auto-hide");
     pinButton->Bind(wxEVT_BUTTON, &DockAreaTitleBar::onPinButtonClicked, this);
     m_layout->Add(pinButton, 0, wxALIGN_CENTER_VERTICAL | wxRIGHT, 2);
diff --git a/src/docking/DockContainerWidget.cpp b/src/docking/DockContainerWidget.cpp
index 1234567..abcdefg 100644
--- a/src/docking/DockContainerWidget.cpp
+++ b/src/docking/DockContainerWidget.cpp
@@ -7,8 +7,8 @@
 namespace ads {
 
 // Define custom events
-wxDEFINE_EVENT(DockContainerWidget::EVT_DOCK_AREAS_ADDED, wxCommandEvent);
-wxDEFINE_EVENT(DockContainerWidget::EVT_DOCK_AREAS_REMOVED, wxCommandEvent);
+wxEventTypeTag<wxCommandEvent> DockContainerWidget::EVT_DOCK_AREAS_ADDED("DockContainerWidget::EVT_DOCK_AREAS_ADDED");
+wxEventTypeTag<wxCommandEvent> DockContainerWidget::EVT_DOCK_AREAS_REMOVED("DockContainerWidget::EVT_DOCK_AREAS_REMOVED");
 
 // Event table
 wxBEGIN_EVENT_TABLE(DockContainerWidget, wxPanel)
@@ -87,7 +87,9 @@ void DockContainerWidget::removeDockArea(DockArea* area) {
     
     // Remove from splitter
     if (area->GetParent() == m_rootSplitter) {
-        m_rootSplitter->Detach(area);
+        if (wxSizer* sizer = m_rootSplitter->GetSizer()) {
+            sizer->Detach(area);
+        }
     }
     
     // Update layout
@@ -138,20 +140,22 @@ DockArea* DockContainerWidget::addDockWidget(DockWidgetArea area, DockWidget* do
     m_dockAreas.push_back(dockArea);
     
     // For now, just add to the root splitter
-    if (m_rootSplitter->GetWindow1() == nullptr) {
-        m_rootSplitter->Initialize(dockArea);
-    } else if (m_rootSplitter->GetWindow2() == nullptr) {
-        // Split based on area
-        if (area == LeftDockWidgetArea || area == RightDockWidgetArea) {
-            m_rootSplitter->SplitVertically(m_rootSplitter->GetWindow1(), dockArea);
-        } else {
-            m_rootSplitter->SplitHorizontally(m_rootSplitter->GetWindow1(), dockArea);
-        }
-    } else {
-        // Need to create sub-splitter
-        DockSplitter* newSplitter = new DockSplitter(this);
-        wxWindow* oldWindow = m_rootSplitter->GetWindow2();
-        
-        m_rootSplitter->ReplaceWindow(oldWindow, newSplitter);
+    if (DockSplitter* splitter = dynamic_cast<DockSplitter*>(m_rootSplitter)) {
+        if (splitter->GetWindow1() == nullptr) {
+            splitter->Initialize(dockArea);
+        } else if (splitter->GetWindow2() == nullptr) {
+            // Split based on area
+            if (area == LeftDockWidgetArea || area == RightDockWidgetArea) {
+                splitter->SplitVertically(splitter->GetWindow1(), dockArea);
+            } else {
+                splitter->SplitHorizontally(splitter->GetWindow1(), dockArea);
+            }
+        } else {
+            // Need to create sub-splitter
+            DockSplitter* newSplitter = new DockSplitter(this);
+            wxWindow* oldWindow = splitter->GetWindow2();
+            
+            splitter->ReplaceWindow(oldWindow, newSplitter);
         
         if (area == LeftDockWidgetArea || area == RightDockWidgetArea) {
             newSplitter->SplitVertically(oldWindow, dockArea);
@@ -159,6 +163,7 @@ DockArea* DockContainerWidget::addDockWidget(DockWidgetArea area, DockWidget* do
             newSplitter->SplitHorizontally(oldWindow, dockArea);
         }
     }
+    }
     
     // Notify
     wxCommandEvent event(EVT_DOCK_AREAS_ADDED);
diff --git a/src/docking/FloatingDockContainer.cpp b/src/docking/FloatingDockContainer.cpp
index 1234567..abcdefg 100644
--- a/src/docking/FloatingDockContainer.cpp
+++ b/src/docking/FloatingDockContainer.cpp
@@ -10,8 +10,8 @@
 namespace ads {
 
 // Define custom events
-wxDEFINE_EVENT(FloatingDockContainer::EVT_FLOATING_CONTAINER_CLOSING, wxCommandEvent);
-wxDEFINE_EVENT(FloatingDockContainer::EVT_FLOATING_CONTAINER_CLOSED, wxCommandEvent);
+wxEventTypeTag<wxCommandEvent> FloatingDockContainer::EVT_FLOATING_CONTAINER_CLOSING("FloatingDockContainer::EVT_FLOATING_CONTAINER_CLOSING");
+wxEventTypeTag<wxCommandEvent> FloatingDockContainer::EVT_FLOATING_CONTAINER_CLOSED("FloatingDockContainer::EVT_FLOATING_CONTAINER_CLOSED");
 
 // Event table
 wxBEGIN_EVENT_TABLE(FloatingDockContainer, wxFrame)
@@ -86,7 +86,7 @@ FloatingDockContainer::FloatingDockContainer(DockManager* dockManager, DockWidge
     
     // Add the dock widget
     if (dockWidget) {
-        addDockWidget(dockWidget, CenterDockWidgetArea);
+        addDockWidget(dockWidget);
     }
 }
 
@@ -113,11 +113,11 @@ void FloatingDockContainer::init() {
     }
 }
 
-void FloatingDockContainer::addDockWidget(DockWidget* dockWidget, DockWidgetArea area) {
+void FloatingDockContainer::addDockWidget(DockWidget* dockWidget) {
     if (!dockWidget || !m_dockContainer) {
         return;
     }
     
-    m_dockContainer->addDockWidget(area, dockWidget);
+    m_dockContainer->addDockWidget(CenterDockWidgetArea, dockWidget);
     updateWindowTitle();
 }
 
@@ -240,9 +240,10 @@ void FloatingDockContainer::setupCustomTitleBar() {
     // TODO: Implement custom title bar
 }
 
-void FloatingDockContainer::testConfigFlag(DockManagerFeature flag) const {
+bool FloatingDockContainer::testConfigFlag(DockManagerFeature flag) const {
     if (m_dockManager) {
-        m_dockManager->testConfigFlag(flag);
+        return m_dockManager->testConfigFlag(flag);
     }
+    return false;
 }
 
diff --git a/src/docking/AutoHideContainer.cpp b/src/docking/AutoHideContainer.cpp
index 1234567..abcdefg 100644
--- a/src/docking/AutoHideContainer.cpp
+++ b/src/docking/AutoHideContainer.cpp
@@ -313,7 +313,7 @@ AutoHideDockContainer::AutoHideDockContainer(wxWindow* parent, DockWidget* dockW
     titleSizer->Add(titleText, 1, wxALIGN_CENTER_VERTICAL | wxLEFT, 5);
     
     // Add pin button
-    wxButton* pinButton = new wxButton(titleBar, wxID_ANY, "ðŸ“Œ", wxDefaultPosition, wxSize(20, 20));
+    wxButton* pinButton = new wxButton(titleBar, wxID_ANY, "P", wxDefaultPosition, wxSize(20, 20));
     pinButton->SetToolTip("Pin/Unpin");
     // Use a proper event handler instead of lambda for better compatibility
     pinButton->Bind(wxEVT_BUTTON, &AutoHideDockContainer::OnPinButtonClick, this);